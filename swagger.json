{   
  "swagger": "2.0",
  "info": {
    "title": "MY BRAND PRINCE BE APIs",
    "description": "This is backend APIs from project collecd my brand prince which consist of 2 part portfolio and admin panel",
    "version": "1.0.0",
    "license":{
      "name":"MIT",
      "url":"https://opensource.org/lisences/MIT"
    }
  },
  "host": "mybrand-prince-be.onrender.com",
  "basepath":"",
  "tags": [
    {
      "name": "Authentication",
      "description": "Operations related to user authentication"
    },
    {
      "name": "Blogs",
      "description": "Operations related to Blogs"
    },
    {
      "name": "Likes",
      "description": "Operations related to Likes/Dislikes"
    },
    {
      "name": "Comments",
      "description": "Operations related to Comments"
    },
    {
      "name": "Messages",
      "description": "Operations related to Messages"
    }
  ],
  "schemes":[
    "http",
    "https"
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "summary": "User Sign Up",
        "description": "Create a new user account",
        "tags": ["Authentication"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstname": {
                    "type": "string"
                  },
                  "lastname": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": ["firstname", "lastname", "email", "password"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "User Sign In",
        "description": "Authenticate user and generate access token",
        "tags": ["Authentication"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": ["email", "password"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/blogs": {
      "get": {
        "summary": "Get all blogs",
        "description": "This endpoint is used to get all blogs",
        "tags": ["Blogs"],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      },
      "post": {
        "summary": "Create a new blog",
        "description": "This endpoint is used to create a new blog",
        "tags": ["Blogs"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "contents": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["title", "description", "contents", "image"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Blog created"
          }
        }
      }
    },
    "/api/blogs/{blogId}": {
      "get": {
        "summary": "Get a single blog by ID",
        "description": "This endpoint is used to get a single blog by its ID",
        "tags": ["Blogs"],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "ID of the blog to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Blog not found"
          }
        }
      },
      "put": {
        "summary": "Update a blog by ID",
        "description": "This endpoint is used to update a single blog by its ID",
        "tags": ["Blogs"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "ID of the blog to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "contents": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string",
                    "format": "url"
                  }
                },
                "required": []
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Blog updated"
          },
          "404": {
            "description": "Blog not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a blog by ID",
        "description": "This endpoint is used to delete a single blog by its ID",
        "tags": ["Blogs"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "ID of the blog to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Blog deleted"
          },
          "404": {
            "description": "Blog not found"
          }
        }
      }
    },
    "/api/messages": {
      "get": {
        "summary": "Get all messages",
        "description": "This endpoint is used to get all messages",
        "tags": ["Messages"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      },
      "post": {
        "summary": "Create a new message",
        "description": "This endpoint is used to create a new message",
        "tags": ["Messages"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  }
                },
                "required": ["username", "email", "content"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Message created"
          }
        }
      }
    },
    "/api/messages/{messageId}": {
      "get": {
        "summary": "Get a single message by ID",
        "description": "This endpoint is used to get a single message by its ID",
        "tags": ["Messages"],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "ID of the message to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Message not found"
          }
        }
      },
      "put": {
        "summary": "Update a message by ID",
        "description": "This endpoint is used to update a single message by its ID",
        "tags": ["Messages"],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "ID of the message to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  }
                },
                "required": []
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Message updated"
          },
          "404": {
            "description": "Message not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a message by ID",
        "description": "This endpoint is used to delete a single message by its ID",
        "tags": ["Messages"],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "ID of the message to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Message deleted"
          },
          "404": {
            "description": "Message not found"
          }
        }
      }
    },
    "/api/comments": {
      "get": {
        "summary": "Get all comments",
        "description": "This endpoint is used to get all comments",
        "tags": ["Comments"],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      },
      "post": {
        "summary": "Create a new comment",
        "description": "This endpoint is used to create a new comment on a blog",
        "tags": ["Comments"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "blogId": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": ["blogId", "description"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Comment created"
          }
        }
      }
    },
    "/api/comments/{commentId}": {
      "get": {
        "summary": "Get a single comment by ID",
        "description": "This endpoint is used to get a single comment by its ID",
        "tags": ["Comments"],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of the comment to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      },
      "put": {
        "summary": "Update a comment by ID",
        "description": "This endpoint is used to update a single comment by its ID",
        "tags": ["Comments"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of the comment to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  }
                },
                "required": ["description"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Comment updated"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a comment by ID",
        "description": "This endpoint is used to delete a single comment by its ID",
        "tags": ["Comments"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of the comment to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Comment deleted"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      }
    },
    "/api/blogs/like/{blogId}": {
      "post": {
        "summary": "Like a blog",
        "description": "This endpoint is used to like a blog",
        "tags": ["Likes"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "ID of the blog to like",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog liked"
          },
          "404": {
            "description": "Blog not found"
          }
        }
      }
    },
    "/api/blogs/dislike/{blogId}": {
      "post": {
        "summary": "Dislike a blog",
        "description": "This endpoint is used to dislike a blog",
        "tags": ["Likes"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "ID of the blog to dislike",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog disliked"
          },
          "404": {
            "description": "Blog not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
